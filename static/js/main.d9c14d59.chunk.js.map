{"version":3,"sources":["GroceryItem.js","CreateItemDialog.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["GroceryItem","props","onUpgradeStatus","e","newStatus","status","Error","onChangeStatus","item","onDowngradeStatus","editModeOn","setState","editing","onSetNotNeeded","onTitleEdited","onChangeItemTitle","target","value","state","listItemContent","bundleName","this","bundle","undefined","isBundleIcon","items","addIcon","ListItemIcon","fontSize","onClick","showRemoveIcon","includes","checkIcon","role","aria-checked","secondaryActions","ListItemSecondaryAction","IconButton","edge","aria-label","type","defaultValue","title","onBlur","autoFocus","Fragment","className","ListItem","disableGutters","onMouseDown","Component","CreateItemDialog","onChangeSubItem","i","length","map","j","onSubmit","preventDefault","Object","assign","filter","x","onAdd","popOverAnchorEl","addBtnRef","current","setTimeout","titleRef","focus","React","createRef","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","TextField","required","inputRef","margin","onChange","label","fullWidth","FormControl","RadioGroup","row","name","FormControlLabel","control","Radio","color","key","DialogActions","Button","ref","Popover","Boolean","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","Typography","rank","App","changeItemTitle","newTitle","updatedItemList","changeStatus","currentStatus","activeBundles","newState","find","notNeeded","bundleItems","bundleItem","sort","y","window","confirm","newItem","showInputModal","showAddModal","getShoppingData","appState","forEach","setShoppingData","data","JSON","parse","localStorage","getItem","menuElem","needed","thisTrip","prevProps","prevState","snapshot","setItem","stringify","editDataMode","style","width","height","display","alignItem","flexGrow","aria-controls","aria-haspopup","currentTarget","Menu","keepMounted","MenuItem","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d9c14d59.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport PropTypes from 'prop-types';\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\n\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\n\r\nexport default class GroceryItem extends Component {\r\n    static propTypes = {\r\n        status: PropTypes.string,\r\n        onChangeStatus: PropTypes.func,\r\n        onChangeItemTitle: PropTypes.func,\r\n        item: PropTypes.shape({\r\n            title: PropTypes.string,\r\n        }),\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            editing: false,\r\n        }\r\n    }\r\n\r\n    onUpgradeStatus = (e) => {\r\n        let newStatus;\r\n        switch (this.props.status) {\r\n            case 'notNeeded':\r\n                newStatus = 'needed';\r\n                break;\r\n            case 'needed':\r\n                newStatus = 'thisTrip';\r\n                break;\r\n            default:\r\n                throw new Error(\"Cannot upgrade status of item\");\r\n        }\r\n        if (this.props.onChangeStatus) {\r\n            this.props.onChangeStatus(e, this.props.item, this.props.status, newStatus);\r\n        }\r\n    };\r\n    onDowngradeStatus = (e) => {\r\n        let newStatus;\r\n        switch (this.props.status) {\r\n            case 'thisTrip':\r\n                newStatus = 'needed';\r\n                break;\r\n            case 'needed':\r\n                newStatus = 'notNeeded';\r\n                break;\r\n            case 'notNeeded':\r\n                newStatus = 'deleted';\r\n                break;\r\n            default:\r\n                throw new Error(\"Cannot downgrade status of item\");\r\n        }\r\n        if (this.props.onChangeStatus) {\r\n            this.props.onChangeStatus(e, this.props.item, this.props.status, newStatus);\r\n        }\r\n    };\r\n\r\n    editModeOn = (e) => {\r\n        this.setState({editing: true});\r\n    };\r\n\r\n    onSetNotNeeded = (e) => {\r\n        if (this.props.onChangeStatus) {\r\n            this.props.onChangeStatus(e, this.props.item, this.props.status, 'notNeeded');\r\n        }\r\n    };\r\n\r\n    onTitleEdited = (e) => {\r\n        this.setState({editing: false});\r\n        this.props.onChangeItemTitle && this.props.onChangeItemTitle(e, this.props.item, this.props.status, e.target.value);\r\n    };\r\n\r\n    render() {\r\n        const bundleName = this.props.item.bundle ? `${this.props.item.bundle}` : undefined;\r\n        const isBundleIcon = this.props.item.items ? <ListIcon/> : undefined;\r\n        const addIcon = (\r\n            <ListItemIcon>\r\n                <AddIcon fontSize=\"large\"\r\n                    onClick={this.onUpgradeStatus}\r\n                />\r\n            </ListItemIcon>\r\n        );\r\n\r\n        // Anything can be downgraded, but only items not part of a bundle can be totally deleted\r\n        const showRemoveIcon = ['needed', 'thisTrip'].includes(this.props.status) || !this.props.item.bundle;\r\n\r\n        const checkIcon = (\r\n            <ListItemIcon\r\n                role=\"checkbox\"\r\n                aria-checked=\"false\"\r\n                onClick={this.onSetNotNeeded}\r\n            >\r\n                <RadioButtonUncheckedIcon\r\n                />\r\n            </ListItemIcon>\r\n        );\r\n        const secondaryActions = (\r\n            <ListItemSecondaryAction >\r\n                {this.state.editing ?\r\n                <IconButton edge=\"end\" aria-label=\"comments\" onClick={() => {\r\n                }}>\r\n                    <CheckIcon/>\r\n                </IconButton>\r\n                :\r\n                <IconButton edge=\"end\" aria-label=\"comments\" onClick={this.editModeOn}>\r\n                    <EditIcon/>\r\n                </IconButton>\r\n                }\r\n                {showRemoveIcon &&\r\n                <IconButton edge=\"end\" aria-label=\"comments\" onClick={this.onDowngradeStatus}>\r\n                    <ClearIcon/>\r\n                </IconButton>\r\n                }\r\n\r\n            </ListItemSecondaryAction>\r\n        );\r\n\r\n        const editIcon = (\r\n            <ListItemSecondaryAction onClick={this.editModeOn}>\r\n                <IconButton edge=\"end\" aria-label=\"comments\">\r\n                    <EditIcon/>\r\n                </IconButton>\r\n            </ListItemSecondaryAction>\r\n        );\r\n\r\n        // use mousedown not click so that this event comes before the onTitleEdited event\r\n        // and we can detect if editing mode is still on\r\n        const onMouseDown = (e) => {\r\n            if (this.props.status === 'notNeeded' && !this.state.editing)\r\n                this.onUpgradeStatus(e);\r\n        };\r\n\r\n        let listItemContent;\r\n        if (this.state.editing) {\r\n            listItemContent = (\r\n                <input\r\n                    type=\"text\"\r\n                    defaultValue={this.props.item.title}\r\n                    onBlur={this.onTitleEdited}\r\n                    autoFocus\r\n                />\r\n            );\r\n        } else {\r\n            listItemContent = (\r\n                <React.Fragment>\r\n                    <div className=\"tripper-list-item-title\">\r\n                        {this.props.item.title} {isBundleIcon}\r\n                    </div>\r\n                    {bundleName &&\r\n                    <div className=\"tripper-list-item-subtitle\">- In&nbsp;\r\n                        <span className=\"tripper-list-item-subtitle-bundle-name\">{bundleName}</span>\r\n                    </div>\r\n                    }\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        return (\r\n            <ListItem disableGutters onMouseDown={onMouseDown}>\r\n                {['notNeeded', 'needed'].includes(this.props.status) && addIcon}\r\n                {['needed', 'thisTrip'].includes(this.props.status) && checkIcon}\r\n                <div className=\"tripper-list-item-content\">\r\n                    {listItemContent}\r\n                </div>\r\n                {secondaryActions}\r\n            </ListItem>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport PropTypes from \"prop-types\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nexport default class CreateItemDialog extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            type: 'grocery',\r\n            title: '',\r\n            items: [],\r\n        };\r\n        this.titleRef = React.createRef();\r\n        this.addBtnRef = React.createRef();\r\n\r\n    }\r\n\r\n    onChangeSubItem = (e, i) => {\r\n        if (this.state.items.length === 0) {\r\n            this.setState({\r\n                items: [{title: e.target.value}],\r\n            });\r\n        } else if (i === this.state.items.length) {\r\n            this.setState({\r\n                items: [...this.state.items, {title: e.target.value}]\r\n            });\r\n        } else {\r\n            this.setState({\r\n                items: this.state.items.map((item, j) => {\r\n                    if (i === j) {\r\n                        return {title: e.target.value}\r\n                    }\r\n                    return item;\r\n                }),\r\n            });\r\n        }\r\n    };\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const item = Object.assign({}, this.state);\r\n        this.setState({title: ''});\r\n        if (item.type === 'grocery') {\r\n            delete item.items;\r\n        } else {\r\n            item.items = item.items.filter(x => x.title);\r\n        }\r\n        delete item.type;\r\n        this.setState({\r\n            title: '',\r\n            items: [],\r\n        });\r\n        this.props.onAdd(e, item);\r\n        this.setState({popOverAnchorEl: this.addBtnRef.current}, () => {\r\n            setTimeout(() => this.setState({popOverAnchorEl:null}), 500);\r\n            this.titleRef.current.focus();\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Dialog open={this.props.open} onClose={this.props.onClose} aria-labelledby=\"form-dialog-title\">\r\n                <form onSubmit={this.onSubmit}>\r\n                    <DialogTitle id=\"form-dialog-title\">Add a New Item</DialogTitle>\r\n                    <DialogContent>\r\n                        <TextField\r\n                            required\r\n                            inputRef={this.titleRef}\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            value={this.state.title}\r\n                            onChange={(e) => {\r\n                                this.setState({title: e.target.value})\r\n                            }}\r\n                            label=\"Item Name\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                        />\r\n                        <FormControl>\r\n                            <RadioGroup row aria-label=\"position\" name=\"position\"\r\n                                        onChange={(e) => this.setState({type: e.target.value})}\r\n                                        defaultValue=\"grocery\">\r\n\r\n                                <FormControlLabel value=\"grocery\" control={<Radio color=\"primary\"/>} label=\"Grocery\"/>\r\n                                <FormControlLabel value=\"bundle\" control={<Radio color=\"primary\"/>} label=\"Bundle\"/>\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                        {this.state.type === 'bundle' &&\r\n                        [...this.state.items, {title: ''}].map((item, i) => {\r\n                            return (\r\n                                <TextField\r\n                                    key={i}\r\n                                    required={i === 0}\r\n                                    margin=\"dense\"\r\n                                    id=\"name\"\r\n                                    value={item.title}\r\n                                    onChange={(e) => this.onChangeSubItem(e, i)}\r\n                                    label={ i === 0 ? 'First Bundle Item' : `Next Item (optional)`}\r\n                                    fullWidth\r\n                                />\r\n                            )\r\n                        })\r\n                        }\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.props.onClose} color=\"primary\">\r\n                            Done\r\n                        </Button>\r\n                        <Button ref={this.addBtnRef} type=\"submit\" color=\"primary\">\r\n                            Add\r\n                        </Button>\r\n                        <Popover\r\n                            open = {Boolean(this.state.popOverAnchorEl)}\r\n                            anchorEl= {this.state.popOverAnchorEl}\r\n                            anchorOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'center',\r\n                            }}\r\n                            transformOrigin={{\r\n                                vertical: 'bottom',\r\n                                horizontal: 'right',\r\n                            }}\r\n                        >\r\n                            <Typography className=\"addItemPopover\">Added! Click Done when finished</Typography>\r\n                        </Popover>\r\n                    </DialogActions>\r\n                </form>\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\nCreateItemDialog.propTypes = {\r\n    title: PropTypes.string,\r\n    type: PropTypes.string,\r\n    items: PropTypes.arrayOf(PropTypes.shape({\r\n        title: PropTypes.string,\r\n    })),\r\n};\r\n","\r\nexport function rank(status) {\r\n    return {\r\n        'notNeeded': 0,\r\n        'needed': 1,\r\n        'thisTrip': 2,\r\n    }[status];\r\n}\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport GroceryItem from \"./GroceryItem\";\nimport List from \"@material-ui/core/List\";\nimport AddIcon from '@material-ui/icons/Add';\nimport Modal from \"@material-ui/core/Modal\";\nimport CreateItemDialog from \"./CreateItemDialog\";\nimport {rank} from \"./utils\";\nimport Button from \"@material-ui/core/Button\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = JSON.parse(localStorage.getItem(\"appState\"));\n        // this.state = null; // debug for resetting storage\n        if (this.state == null) {\n            this.state = {\n                showAddModal: false,\n                menuElem: null,\n                notNeeded: [\n                    {\n                        title: \"Buffalo Dip\",\n                        items: [\n                            {\n                                title: \"Cream Cheese Block 2x\",\n                            },\n                            {\n                                title: \"Franks Red Hot\",\n                            },\n                            {\n                                title: \"Ranch\",\n                            },\n                        ],\n                    },\n                    {\n                        title: \"Bagels\",\n                    },\n                ],\n                needed: [\n                    {\n                        title: \"Ground Beef\",\n                    },\n                ],\n                activeBundles: [],\n                thisTrip: [],\n            };\n        }\n        ['thisTrip', 'needed', 'notNeeded', 'activeBundles'].forEach((x) => {\n            if (!this.state[x]) {\n                this.state[x] = [];\n            }\n        });\n    }\n\n    changeItemTitle = (e, item, status, newTitle) => {\n        const updatedItemList = this.state[status].map((x) => {\n            if (x === item) {\n                x.title = newTitle;\n                return x;\n            } else {\n                return x;\n            }\n        });\n        this.setState({[status]: updatedItemList});\n    };\n\n    changeStatus = (e, item, currentStatus, newStatus) => {\n        if (newStatus === 'deleted') {\n            if (window.confirm(`Are you sure you want to permanently delete ${item.title}`)) {\n                this.setState({\n                    notNeeded: this.state.notNeeded.filter(x => x !== item),\n                });\n            }\n            return;\n        }\n        if ('items' in item) { //if bundle being added, remove the bundle and spread out items\n            this.setState({\n                [currentStatus]: this.state[currentStatus].filter(x => x !== item),\n                [newStatus]: [...this.state[newStatus], ...item.items.map(x => {\n                    return {...x, bundle: item.title};\n                })],\n                activeBundles: [...this.state.activeBundles, {title: item.title, length:item.items.length}],\n            });\n        } else {\n            let newState = {\n                ...this.state,\n                [currentStatus]: this.state[currentStatus].filter(x => x !== item),\n            };\n            if (rank(newStatus) < rank(currentStatus)) {\n                newState[newStatus] = [item, ...this.state[newStatus]];\n            } else {\n                newState[newStatus] = [...this.state[newStatus], item];\n            }\n\n            if (newStatus === 'notNeeded' && 'bundle' in item) {\n                // if last bundle item is obtained, collapse items into single bundle card\n                const bundle = this.state.activeBundles.find(x => x.title === item.bundle);\n                if (newState.notNeeded.filter(x => x.bundle === bundle.title).length === bundle.length) {\n                    const bundleItems = newState.notNeeded.filter(x => x.bundle === bundle.title);\n                    const bundleItem = {title: bundle.title, items: bundleItems};\n                    newState = {\n                        ...newState,\n                        activeBundles: newState.activeBundles.filter(x => x !== bundle),\n                        notNeeded: [bundleItem, ...newState.notNeeded.filter(x => x.bundle !== bundle.title)],\n                    }\n                }\n            }\n            if (newStatus === 'notNeeded') {\n                newState[newStatus].sort((x, y) => x.title > y.title ? 1 : -1);\n            }\n\n            this.setState(newState);\n        }\n    };\n\n    onAdd = (e, newItem) => {\n        this.setState({\n            notNeeded: [...this.state.notNeeded, newItem],\n        });\n    };\n\n    showInputModal = (e) => {\n        this.setState({showAddModal: true})\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        localStorage.setItem('appState', JSON.stringify(this.getShoppingData()));\n    };\n\n    getShoppingData = () => {\n        const appState = {};\n        ['thisTrip', 'needed', 'notNeeded', 'activeBundles'].forEach((x) => {\n            appState[x] = this.state[x];\n        });\n        return appState;\n    };\n\n    setShoppingData = (data) => {\n        const appState = {};\n        ['thisTrip', 'needed', 'notNeeded', 'activeBundles'].forEach((x) => {\n            appState[x] = data[x] || [];\n        });\n        this.setState(appState);\n    };\n\n    render() {\n        return (\n            <div>\n                <CreateItemDialog\n                    open={this.state.showAddModal}\n                    onClose={() => {\n                        this.setState({showAddModal: false})\n                    }}\n                    onAdd={this.onAdd}\n                >\n                </CreateItemDialog>\n\n                {this.state.editDataMode &&\n                    <div>\n                        <textarea\n                            style={{width: '100%', height: '600px'}}\n                            defaultValue={JSON.stringify(this.getShoppingData(), null, 2)}\n                            onBlur={e => {\n                                this.setShoppingData(JSON.parse(e.target.value));\n                                this.setState({editDataMode: false});\n                            }}\n                        >\n                        </textarea>\n                    </div>\n                }\n                <div style={{display: 'flex', alignItem: 'center'}}>\n                    <h1 style={{flexGrow: 1}}>This Trip</h1>\n                    <div>\n                        <IconButton\n                            aria-label=\"more\"\n                            aria-controls=\"long-menu\"\n                            aria-haspopup=\"true\"\n                            onClick={(e) => this.setState({menuElem: e.currentTarget})}\n                        >\n                            <MoreVertIcon />\n                        </IconButton>\n                        <Menu\n                            id=\"simple-menu\"\n                            anchorEl={this.state.menuElem}\n                            keepMounted\n                            open={Boolean(this.state.menuElem)}\n                            onClose={() => this.setState({menuElem: null})}\n                        >\n                            <MenuItem onClick={(e) => {\n                                this.setState({editDataMode: !this.state.editDataMode});\n                            }}\n                            >\n                                Edit Data\n                            </MenuItem>\n                        </Menu>\n                    </div>\n                </div>\n                <List className=\"ul-this-trip\">\n                    {\n                        this.state.thisTrip.map((item) => {\n                            return (\n                                <GroceryItem key={item.title + item.bundle} item={item} status=\"thisTrip\"\n                                             onChangeStatus={this.changeStatus}\n                                             onChangeItemTitle={this.changeItemTitle}\n                                />\n                            );\n                        })\n                    }\n                </List>\n                <h1>Needed</h1>\n                <List className=\"ul-needed\">\n                    {\n                        this.state.needed.map((item) => {\n                            return (\n                                <GroceryItem key={item.title + item.bundle} item={item} status=\"needed\"\n                                             onChangeStatus={this.changeStatus}\n                                             onChangeItemTitle={this.changeItemTitle}\n                                />\n                            );\n                        })\n                    }\n                </List>\n                <h1 className='category-header'>\n                    Not Needed.\n                    <AddIcon onClick={this.showInputModal} className=\"add-btn\" role=\"button\"/>\n                </h1>\n                <List className=\"ul-not-needed\">\n                    {\n                        this.state.notNeeded.map((item) => {\n                            return (\n                                <GroceryItem key={item.title + item.bundle} item={item} status=\"notNeeded\"\n                                             onChangeStatus={this.changeStatus}\n                                             onChangeItemTitle={this.changeItemTitle}\n                                />\n                            );\n                        })\n                    }\n                </List>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}