{"version":3,"sources":["GroceryItem.js","CreateItemDialog.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["GroceryItem","onUpgradeStatus","e","newStatus","props","status","Error","onChangeStatus","item","onDowngradeStatus","onSetNotNeeded","inBundleIcon","this","bundle","undefined","isBundleIcon","items","addIcon","ListItemIcon","fontSize","onClick","checkIcon","removeIcon","ListItemSecondaryAction","IconButton","edge","aria-label","showRemoveIcon","includes","ListItem","title","Component","CreateItemDialog","onChangeSubItem","i","state","length","setState","target","value","map","j","onSubmit","preventDefault","Object","assign","type","filter","x","onAdd","popOverAnchorEl","addBtnRef","current","setTimeout","titleRef","focus","React","createRef","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","TextField","required","inputRef","margin","onChange","label","fullWidth","FormControl","RadioGroup","row","name","defaultValue","FormControlLabel","control","Radio","color","key","DialogActions","Button","ref","Popover","Boolean","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","Typography","className","rank","App","changeStatus","currentStatus","activeBundles","newState","find","notNeeded","bundleItems","bundleItem","window","confirm","newItem","showInputModal","showAddModal","JSON","parse","localStorage","getItem","needed","thisTrip","prevProps","prevState","snapshot","setItem","stringify","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bfe061d5.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport PropTypes from 'prop-types';\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ListIcon from '@material-ui/icons/List';\r\n\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\n\r\nexport default class GroceryItem extends Component {\r\n    static propTypes = {\r\n        status: PropTypes.string,\r\n        onChangeStatus: PropTypes.func,\r\n        item: PropTypes.shape({\r\n            title: PropTypes.string,\r\n        }),\r\n    };\r\n\r\n    onUpgradeStatus = (e) => {\r\n        let newStatus;\r\n        switch (this.props.status) {\r\n            case 'notNeeded':\r\n                newStatus = 'needed';\r\n                break;\r\n            case 'needed':\r\n                newStatus = 'thisTrip';\r\n                break;\r\n            default:\r\n                throw new Error(\"Cannot upgrade status of item\");\r\n        }\r\n        if (this.props.onChangeStatus) {\r\n            this.props.onChangeStatus(e, this.props.item, this.props.status, newStatus);\r\n        }\r\n    };\r\n    onDowngradeStatus = (e) => {\r\n        let newStatus;\r\n        switch (this.props.status) {\r\n            case 'thisTrip':\r\n                newStatus = 'needed';\r\n                break;\r\n            case 'needed':\r\n                newStatus = 'notNeeded';\r\n                break;\r\n            case 'notNeeded':\r\n                newStatus = 'deleted';\r\n                break;\r\n            default:\r\n                throw new Error(\"Cannot downgrade status of item\");\r\n        }\r\n        if (this.props.onChangeStatus) {\r\n            this.props.onChangeStatus(e, this.props.item, this.props.status, newStatus);\r\n        }\r\n    };\r\n\r\n    onSetNotNeeded = (e) => {\r\n        if (this.props.onChangeStatus) {\r\n            this.props.onChangeStatus(e, this.props.item, this.props.status, 'notNeeded');\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const inBundleIcon = this.props.item.bundle ? `(${this.props.item.bundle})` : undefined;\r\n        const isBundleIcon = this.props.item.items ? <ListIcon/> : undefined;\r\n\r\n        const addIcon = (\r\n            <ListItemIcon>\r\n                <AddIcon fontSize=\"large\"\r\n                    onClick={this.onUpgradeStatus}\r\n                />\r\n            </ListItemIcon>\r\n        );\r\n        const checkIcon = (\r\n            <ListItemIcon>\r\n                <RadioButtonUncheckedIcon\r\n                    onClick={this.onSetNotNeeded}\r\n                />\r\n            </ListItemIcon>\r\n        );\r\n        const removeIcon = (\r\n            <ListItemSecondaryAction onClick={this.onDowngradeStatus}>\r\n                <IconButton edge=\"end\" aria-label=\"comments\">\r\n                    <ClearIcon/>\r\n                </IconButton>\r\n            </ListItemSecondaryAction>\r\n        );\r\n\r\n        const onNotNeededClick = (e) => {\r\n            if (this.props.status === 'notNeeded')\r\n                this.onUpgradeStatus(e);\r\n        };\r\n\r\n        // Anything can be downgraded, but only items not part of a bundle can be totally deleted\r\n        const showRemoveIcon = ['needed', 'thisTrip'].includes(this.props.status) || !this.props.item.bundle;\r\n\r\n        return (\r\n            <ListItem onClick={onNotNeededClick}>\r\n                {['notNeeded', 'needed'].includes(this.props.status) && addIcon}\r\n                {['needed', 'thisTrip'].includes(this.props.status) && checkIcon}\r\n                {this.props.item.title} {inBundleIcon} {isBundleIcon}\r\n                {showRemoveIcon && removeIcon}\r\n            </ListItem>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport PropTypes from \"prop-types\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nexport default class CreateItemDialog extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            type: 'grocery',\r\n            title: '',\r\n            items: [],\r\n        };\r\n        this.titleRef = React.createRef();\r\n        this.addBtnRef = React.createRef();\r\n\r\n    }\r\n\r\n    onChangeSubItem = (e, i) => {\r\n        if (this.state.items.length === 0) {\r\n            this.setState({\r\n                items: [{title: e.target.value}],\r\n            });\r\n        } else if (i === this.state.items.length) {\r\n            this.setState({\r\n                items: [...this.state.items, {title: e.target.value}]\r\n            });\r\n        } else {\r\n            this.setState({\r\n                items: this.state.items.map((item, j) => {\r\n                    if (i === j) {\r\n                        return {title: e.target.value}\r\n                    }\r\n                    return item;\r\n                }),\r\n            });\r\n        }\r\n    };\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const item = Object.assign({}, this.state);\r\n        this.setState({title: ''});\r\n        if (item.type === 'grocery') {\r\n            delete item.items;\r\n        } else {\r\n            item.items = item.items.filter(x => x.title);\r\n        }\r\n        delete item.type;\r\n        this.setState({\r\n            title: '',\r\n            items: [],\r\n        });\r\n        this.props.onAdd(e, item);\r\n        this.setState({popOverAnchorEl: this.addBtnRef.current}, () => {\r\n            setTimeout(() => this.setState({popOverAnchorEl:null}), 500);\r\n            this.titleRef.current.focus();\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Dialog open={this.props.open} onClose={this.props.onClose} aria-labelledby=\"form-dialog-title\">\r\n                <form onSubmit={this.onSubmit}>\r\n                    <DialogTitle id=\"form-dialog-title\">Add a New Item</DialogTitle>\r\n                    <DialogContent>\r\n                        <TextField\r\n                            required\r\n                            inputRef={this.titleRef}\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            value={this.state.title}\r\n                            onChange={(e) => {\r\n                                this.setState({title: e.target.value})\r\n                            }}\r\n                            label=\"Item Name\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                        />\r\n                        <FormControl>\r\n                            <RadioGroup row aria-label=\"position\" name=\"position\"\r\n                                        onChange={(e) => this.setState({type: e.target.value})}\r\n                                        defaultValue=\"grocery\">\r\n\r\n                                <FormControlLabel value=\"grocery\" control={<Radio color=\"primary\"/>} label=\"Grocery\"/>\r\n                                <FormControlLabel value=\"bundle\" control={<Radio color=\"primary\"/>} label=\"Bundle\"/>\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                        {this.state.type === 'bundle' &&\r\n                        [...this.state.items, {title: ''}].map((item, i) => {\r\n                            return (\r\n                                <TextField\r\n                                    key={i}\r\n                                    required={i === 0}\r\n                                    margin=\"dense\"\r\n                                    id=\"name\"\r\n                                    value={item.title}\r\n                                    onChange={(e) => this.onChangeSubItem(e, i)}\r\n                                    label={ i === 0 ? 'First Bundle Item' : `Next Item (optional)`}\r\n                                    fullWidth\r\n                                />\r\n                            )\r\n                        })\r\n                        }\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.props.onClose} color=\"primary\">\r\n                            Done\r\n                        </Button>\r\n                        <Button ref={this.addBtnRef} type=\"submit\" color=\"primary\">\r\n                            Add\r\n                        </Button>\r\n                        <Popover\r\n                            open = {Boolean(this.state.popOverAnchorEl)}\r\n                            anchorEl= {this.state.popOverAnchorEl}\r\n                            anchorOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'center',\r\n                            }}\r\n                            transformOrigin={{\r\n                                vertical: 'bottom',\r\n                                horizontal: 'right',\r\n                            }}\r\n                        >\r\n                            <Typography className=\"addItemPopover\">Added! Click Done when finished</Typography>\r\n                        </Popover>\r\n                    </DialogActions>\r\n                </form>\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\nCreateItemDialog.propTypes = {\r\n    title: PropTypes.string,\r\n    type: PropTypes.string,\r\n    items: PropTypes.arrayOf(PropTypes.shape({\r\n        title: PropTypes.string,\r\n    })),\r\n};\r\n","\r\nexport function rank(status) {\r\n    return {\r\n        'notNeeded': 0,\r\n        'needed': 1,\r\n        'thisTrip': 2,\r\n    }[status];\r\n}\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport GroceryItem from \"./GroceryItem\";\nimport List from \"@material-ui/core/List\";\nimport AddIcon from '@material-ui/icons/Add';\nimport Modal from \"@material-ui/core/Modal\";\nimport CreateItemDialog from \"./CreateItemDialog\";\nimport {rank} from \"./utils\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = JSON.parse(localStorage.getItem(\"appState\"));\n        this.state = null; // debug for resetting storage\n        if (this.state == null) {\n            this.state = {\n                showAddModal: false,\n                notNeeded: [\n                    {\n                        id: 11,\n                        title: \"Buffalo Dip\",\n                        items: [\n                            {\n                                id: 1,\n                                title: \"Cream Cheese Block 2x\",\n                            },\n                            {\n                                id: 2,\n                                title: \"Franks Red Hot\",\n                            },\n                            {\n                                id: 3,\n                                title: \"Ranch\",\n                            },\n                        ],\n                    },\n                    {\n                        id: 5,\n                        title: \"Bagels\",\n                    },\n                ],\n                needed: [\n                    {\n                        id: 4,\n                        title: \"Ground Beef\",\n                    },\n                ],\n                activeBundles: [],\n                thisTrip: [],\n            };\n        }\n    }\n\n    changeStatus = (e, item, currentStatus, newStatus) => {\n        if (newStatus === 'deleted') {\n            if (window.confirm(`Are you sure you want to permanently delete ${item.title}`)) {\n                this.setState({\n                    notNeeded: this.state.notNeeded.filter(x => x !== item),\n                });\n            }\n            return;\n        }\n        if ('items' in item) { //if bundle being added, remove the bundle and spread out items\n            this.setState({\n                [currentStatus]: this.state[currentStatus].filter(x => x !== item),\n                [newStatus]: [...this.state[newStatus], ...item.items.map(x => {\n                    return {...x, bundle: item.title};\n                })],\n                activeBundles: [...this.state.activeBundles, {title: item.title, length:item.items.length}],\n            });\n        } else {\n            let newState = {\n                ...this.state,\n                [currentStatus]: this.state[currentStatus].filter(x => x !== item),\n            };\n            if (rank(newStatus) < rank(currentStatus)) {\n                newState[newStatus] = [item, ...this.state[newStatus]];\n            } else {\n                newState[newStatus] = [...this.state[newStatus], item];\n            }\n\n            if (newStatus === 'notNeeded' && 'bundle' in item) {\n                // if last bundle item is obtained, collapse items into single bundle card\n                const bundle = this.state.activeBundles.find(x => x.title === item.bundle);\n                if (newState.notNeeded.filter(x => x.bundle === bundle.title).length === bundle.length) {\n                    const bundleItems = newState.notNeeded.filter(x => x.bundle === bundle.title);\n                    const bundleItem = {title: bundle.title, items: bundleItems};\n                    newState = {\n                        ...newState,\n                        activeBundles: newState.activeBundles.filter(x => x !== bundle),\n                        notNeeded: [bundleItem, ...newState.notNeeded.filter(x => x.bundle !== bundle.title)],\n                    }\n                }\n            }\n            this.setState(newState);\n        }\n    };\n\n    onAdd = (e, newItem) => {\n        this.setState({\n            notNeeded: [...this.state.notNeeded, newItem],\n        });\n    };\n\n    showInputModal = (e) => {\n        this.setState({showAddModal: true})\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        localStorage.setItem('appState', JSON.stringify(this.state));\n    }\n\n    render() {\n        return (\n            <div>\n                <CreateItemDialog\n                    open={this.state.showAddModal}\n                    onClose={() => {\n                        this.setState({showAddModal: false})\n                    }}\n                    onAdd={this.onAdd}\n                >\n\n                </CreateItemDialog>\n\n                <h1>This Trip</h1>\n                <List>\n                    {\n                        this.state.thisTrip.map((item) => {\n                            return (\n                                <GroceryItem key={item.id} item={item} status=\"thisTrip\"\n                                             onChangeStatus={this.changeStatus}/>\n                            );\n                        })\n                    }\n                </List>\n                <h1>Needed</h1>\n                <List>\n                    {\n                        this.state.needed.map((item) => {\n                            return (\n                                <GroceryItem key={item.id} item={item} status=\"needed\"\n                                             onChangeStatus={this.changeStatus}/>\n                            );\n                        })\n                    }\n                </List>\n                <h1 className='category-header'>\n                    Not Needed\n                    <AddIcon onClick={this.showInputModal}/>\n                </h1>\n                <List>\n                    {\n                        this.state.notNeeded.map((item) => {\n                            return (\n                                <GroceryItem key={item.id} item={item} status=\"notNeeded\"\n                                             onChangeStatus={this.changeStatus}/>\n                            );\n                        })\n                    }\n                </List>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}